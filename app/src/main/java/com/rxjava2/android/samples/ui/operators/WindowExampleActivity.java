package com.rxjava2.android.samples.ui.operators;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.TextView;import com.rxjava2.android.samples.R;import com.rxjava2.android.samples.utils.AppConstant;import java.util.concurrent.TimeUnit;import androidx.appcompat.app.AppCompatActivity;import io.reactivex.Observable;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.functions.Consumer;import io.reactivex.schedulers.Schedulers;public class WindowExampleActivity extends AppCompatActivity {    private static final String TAG = WindowExampleActivity.class.getSimpleName();    Button btn;    TextView textView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_example);        btn = findViewById(R.id.btn);        textView = findViewById(R.id.textView);        btn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                doSomeWork();            }        });    }    /*     * Example using window operator -> It periodically     * subdivide items from an Observable into     * Observable windows and emit these windows rather than     * emitting the items one at a time     * *使用窗口运算符->周期性     *从可观察到的细分项目     *可观察的窗口并发射这些窗口而不是     *一次发射一个项目     */    // TODO: 2018/11/26  RxJava的window()函数和buffer()很像，但是它发射的是Observable而不是列表。下图展示了window()如何缓存3个数据项并把它们作为一个新的Observable发射出去。    protected void doSomeWork() {        //interval轮询        // take()函数用整数N来作为一个参数，从原始的序列中发射前N个元素，然后完成：        Observable.interval(1, TimeUnit.SECONDS).take(12)                .window(3, TimeUnit.SECONDS)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(getConsumer());    }    public Consumer<Observable<Long>> getConsumer() {        return new Consumer<Observable<Long>>() {            @Override            public void accept(Observable<Long> observable) {                Log.d(TAG, "Sub Divide begin....");                textView.append("Sub Divide begin ....");                textView.append(AppConstant.LINE_SEPARATOR);                observable                        .subscribeOn(Schedulers.io())                        .observeOn(AndroidSchedulers.mainThread())                        .subscribe(new Consumer<Long>() {                            @Override                            public void accept(Long value) {                                Log.d(TAG, "Next:" + value);                                textView.append("Next:" + value);                                textView.append(AppConstant.LINE_SEPARATOR);                            }                        });            }        };    }}